generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL") // pooled (pgbouncer 6543)
  directUrl = env("DIRECT_URL") // direct (5432) for migrate/introspect
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  name             String?
  image            String?
  stripeCustomerId String?
  credits          Int       @default(0) // Créditos disponibles
  maxPatients      Int? // NULL = ilimitado, 10 para SOLO
  trialEndsAt      DateTime? // Fecha fin de trial (14 días)
  trialUsed        Boolean   @default(false) // Ya usó el trial gratuito
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  subscriptions      Subscription[]
  patients           Patient[]
  auditLogs          AuditLog[]
  consents           Consent[]           @relation("Consent_user")
  creditTransactions CreditTransaction[]

  // NextAuth relations
  accounts Account[]
  sessions AuthSession[]
}

model Patient {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName    String
  email       String?
  phone       String?
  birthDate   DateTime?
  notesSecure String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  sessions  PatientSession[]
  consents  Consent[]        @relation("Consent_patient")
  auditLogs AuditLog[]       @relation("AuditLog_patient")
}

model PatientSession {
  id                 String        @id @default(cuid())
  patientId          String
  patient            Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)
  date               DateTime
  noteDocSecure      String?
  audioUrl           String?
  audioBytesSec      Int?
  audioDurationMin   Int? // Duración en minutos (calculada)
  transcriptSecure   String?
  analysisJsonSecure String?
  status             SessionStatus @default(DRAFT)
  creditsUsed        Int? // Créditos consumidos en análisis IA
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt

  auditLogs         AuditLog[]         @relation("AuditLog_session")
  creditTransaction CreditTransaction? @relation("CreditTransaction_session")
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeSubId      String   @unique
  plan             Plan     @default(PROFESSIONAL)
  status           String
  currentPeriodEnd DateTime
}

model Consent {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation("Consent_user", fields: [userId], references: [id], onDelete: Cascade)
  patientId String
  patient   Patient   @relation("Consent_patient", fields: [patientId], references: [id], onDelete: Cascade)
  kind      String
  grantedAt DateTime  @default(now())
  revokedAt DateTime?
}

model AuditLog {
  id     String  @id @default(cuid())
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  patientId String?
  patient   Patient? @relation("AuditLog_patient", fields: [patientId], references: [id])

  sessionId String?
  session   PatientSession? @relation("AuditLog_session", fields: [sessionId], references: [id])

  action    String
  meta      Json?
  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model AuthSession {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CreditTransaction {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  sessionId String?         @unique
  session   PatientSession? @relation("CreditTransaction_session", fields: [sessionId], references: [id], onDelete: SetNull)

  type      CreditTransactionType
  amount    Int // Positivo = añadido, Negativo = consumido
  balance   Int // Balance después de esta transacción
  reason    String? // "monthly_refill", "stripe_purchase", "ai_analysis", etc.
  meta      Json? // Metadata adicional
  createdAt DateTime              @default(now())

  @@index([userId, createdAt])
}

enum Plan {
  SOLO
  PRACTICE
  PROFESSIONAL
}

enum CreditTransactionType {
  GRANT // Créditos añadidos (suscripción, compra)
  CONSUME // Créditos consumidos (análisis IA)
  REFUND // Reembolso
  ADJUSTMENT // Ajuste manual
}

enum SessionStatus {
  DRAFT
  PROCESSING
  READY
  ERROR
}
